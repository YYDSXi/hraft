// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.1
// source: block.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//创世块
type GenesisBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp      string `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`             //创建时间戳
	KeyId                string `protobuf:"bytes,2,opt,name=KeyId,proto3" json:"KeyId,omitempty"`                                 //key值
	Height               int64  `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`                              //创世区块就是区块高位为1
	GenesisBlockHash     string `protobuf:"bytes,4,opt,name=GenesisBlockHash,proto3" json:"GenesisBlockHash,omitempty"`           //创世区块哈希值
	DataCounts           int32  `protobuf:"varint,5,opt,name=DataCounts,proto3" json:"DataCounts,omitempty"`                      //数据交易量
	DataSize             int64  `protobuf:"varint,6,opt,name=DataSize,proto3" json:"DataSize,omitempty"`                          //总数据量大小
	ChildBlockCount      int32  `protobuf:"varint,7,opt,name=ChildBlockCount,proto3" json:"ChildBlockCount,omitempty"`            //子块数量
	UpdateTimestamp      string `protobuf:"bytes,8,opt,name=UpdateTimestamp,proto3" json:"UpdateTimestamp,omitempty"`             //更新时间戳
	CumulativeBlock      int64  `protobuf:"varint,9,opt,name=cumulativeBlock,proto3" json:"cumulativeBlock,omitempty"`            //累计区块总数
	Version              string `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`                            //创世区块版本号
	BlockChainType       string `protobuf:"bytes,11,opt,name=BlockChainType,proto3" json:"BlockChainType,omitempty"`              //目前主要三条链标示不同的链
	LedgerType           string `protobuf:"bytes,12,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`                      //目前主要三条链标示不同的链
	CreateChainTimestamp string `protobuf:"bytes,13,opt,name=CreateChainTimestamp,proto3" json:"CreateChainTimestamp,omitempty"`  //链创建时间
	CumulativeValue      int64  `protobuf:"varint,14,opt,name=CumulativeValue,proto3" json:"CumulativeValue,omitempty"`           // 累计价值量
	CumulativeNode       int64  `protobuf:"varint,15,opt,name=CumulativeNode,proto3" json:"CumulativeNode,omitempty"`             //      累计参与终端数
	CumulativeUser       int64  `protobuf:"varint,16,opt,name=CumulativeUser,proto3" json:"CumulativeUser,omitempty"`             //   累计用户数
	GroupMasterNodeCount int32  `protobuf:"varint,17,opt,name=GroupMasterNodeCount,proto3" json:"GroupMasterNodeCount,omitempty"` //集群master节点数量
	GroupSlaveNodeCount  int32  `protobuf:"varint,18,opt,name=GroupSlaveNodeCount,proto3" json:"GroupSlaveNodeCount,omitempty"`   //集群slave节点数量
}

func (x *GenesisBlock) Reset() {
	*x = GenesisBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisBlock) ProtoMessage() {}

func (x *GenesisBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisBlock.ProtoReflect.Descriptor instead.
func (*GenesisBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisBlock) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *GenesisBlock) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GenesisBlock) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GenesisBlock) GetGenesisBlockHash() string {
	if x != nil {
		return x.GenesisBlockHash
	}
	return ""
}

func (x *GenesisBlock) GetDataCounts() int32 {
	if x != nil {
		return x.DataCounts
	}
	return 0
}

func (x *GenesisBlock) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *GenesisBlock) GetChildBlockCount() int32 {
	if x != nil {
		return x.ChildBlockCount
	}
	return 0
}

func (x *GenesisBlock) GetUpdateTimestamp() string {
	if x != nil {
		return x.UpdateTimestamp
	}
	return ""
}

func (x *GenesisBlock) GetCumulativeBlock() int64 {
	if x != nil {
		return x.CumulativeBlock
	}
	return 0
}

func (x *GenesisBlock) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GenesisBlock) GetBlockChainType() string {
	if x != nil {
		return x.BlockChainType
	}
	return ""
}

func (x *GenesisBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *GenesisBlock) GetCreateChainTimestamp() string {
	if x != nil {
		return x.CreateChainTimestamp
	}
	return ""
}

func (x *GenesisBlock) GetCumulativeValue() int64 {
	if x != nil {
		return x.CumulativeValue
	}
	return 0
}

func (x *GenesisBlock) GetCumulativeNode() int64 {
	if x != nil {
		return x.CumulativeNode
	}
	return 0
}

func (x *GenesisBlock) GetCumulativeUser() int64 {
	if x != nil {
		return x.CumulativeUser
	}
	return 0
}

func (x *GenesisBlock) GetGroupMasterNodeCount() int32 {
	if x != nil {
		return x.GroupMasterNodeCount
	}
	return 0
}

func (x *GenesisBlock) GetGroupSlaveNodeCount() int32 {
	if x != nil {
		return x.GroupSlaveNodeCount
	}
	return 0
}

//存证数据
type DataReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp     string   `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	EntityId            string   `protobuf:"bytes,2,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	KeyId               string   `protobuf:"bytes,3,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	ReceiptValue        float64  `protobuf:"fixed64,4,opt,name=ReceiptValue,proto3" json:"ReceiptValue,omitempty"`
	Version             string   `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	UserName            string   `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	OperationType       string   `protobuf:"bytes,7,opt,name=OperationType,proto3" json:"OperationType,omitempty"`
	DataType            string   `protobuf:"bytes,8,opt,name=DataType,proto3" json:"DataType,omitempty"`
	ServiceType         string   `protobuf:"bytes,9,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	FileName            string   `protobuf:"bytes,10,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileSize            float64  `protobuf:"fixed64,11,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	FileHash            string   `protobuf:"bytes,12,opt,name=FileHash,proto3" json:"FileHash,omitempty"`
	Uri                 string   `protobuf:"bytes,13,opt,name=Uri,proto3" json:"Uri,omitempty"`
	ParentKeyId         string   `protobuf:"bytes,14,opt,name=ParentKeyId,proto3" json:"ParentKeyId,omitempty"`
	AttachmentFileUris  []string `protobuf:"bytes,15,rep,name=AttachmentFileUris,proto3" json:"AttachmentFileUris,omitempty"`
	AttachmentTotalHash string   `protobuf:"bytes,16,opt,name=AttachmentTotalHash,proto3" json:"AttachmentTotalHash,omitempty"`
}

func (x *DataReceipt) Reset() {
	*x = DataReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReceipt) ProtoMessage() {}

func (x *DataReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReceipt.ProtoReflect.Descriptor instead.
func (*DataReceipt) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{1}
}

func (x *DataReceipt) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *DataReceipt) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *DataReceipt) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *DataReceipt) GetReceiptValue() float64 {
	if x != nil {
		return x.ReceiptValue
	}
	return 0
}

func (x *DataReceipt) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DataReceipt) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *DataReceipt) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *DataReceipt) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DataReceipt) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *DataReceipt) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DataReceipt) GetFileSize() float64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *DataReceipt) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *DataReceipt) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DataReceipt) GetParentKeyId() string {
	if x != nil {
		return x.ParentKeyId
	}
	return ""
}

func (x *DataReceipt) GetAttachmentFileUris() []string {
	if x != nil {
		return x.AttachmentFileUris
	}
	return nil
}

func (x *DataReceipt) GetAttachmentTotalHash() string {
	if x != nil {
		return x.AttachmentTotalHash
	}
	return ""
}

//交易
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp string  `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	EntityId        string  `protobuf:"bytes,2,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	TransactionId   string  `protobuf:"bytes,3,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	Initiator       string  `protobuf:"bytes,4,opt,name=Initiator,proto3" json:"Initiator,omitempty"`
	Receipt         string  `protobuf:"bytes,5,opt,name=Receipt,proto3" json:"Receipt,omitempty"`
	TxAmount        float64 `protobuf:"fixed64,6,opt,name=TxAmount,proto3" json:"TxAmount,omitempty"`
	DataType        string  `protobuf:"bytes,7,opt,name=DataType,proto3" json:"DataType,omitempty"`
	ServiceType     string  `protobuf:"bytes,8,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	Remark          string  `protobuf:"bytes,9,opt,name=Remark,proto3" json:"Remark,omitempty"`
	BlockIdentify   string  `protobuf:"bytes,10,opt,name=BlockIdentify,proto3" json:"BlockIdentify,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *Transaction) GetEntityId() string {
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *Transaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *Transaction) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *Transaction) GetReceipt() string {
	if x != nil {
		return x.Receipt
	}
	return ""
}

func (x *Transaction) GetTxAmount() float64 {
	if x != nil {
		return x.TxAmount
	}
	return 0
}

func (x *Transaction) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Transaction) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *Transaction) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Transaction) GetBlockIdentify() string {
	if x != nil {
		return x.BlockIdentify
	}
	return ""
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp string `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"` //创建时间戳
	KeyId           string `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	BlockHeight     int64  `protobuf:"varint,3,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"` //通过该字段，获取当前区块 可以使用不同链
	//具体数据结构类型
	DataType         string `protobuf:"bytes,4,opt,name=DataType,proto3" json:"DataType,omitempty"`                   //数据类型
	DataValue        string `protobuf:"bytes,5,opt,name=DataValue,proto3" json:"DataValue,omitempty"`                 //数据价值
	UpdateTimestamp  string `protobuf:"bytes,6,opt,name=UpdateTimestamp,proto3" json:"UpdateTimestamp,omitempty"`     //更新时间戳
	DataHash         string `protobuf:"bytes,7,opt,name=DataHash,proto3" json:"DataHash,omitempty"`                   //数据哈希值
	BlockHash        string `protobuf:"bytes,8,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`                 //区块哈希值
	PreBlockHash     string `protobuf:"bytes,9,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`           //前一个区块hash值
	Nonce            int32  `protobuf:"varint,10,opt,name=Nonce,proto3" json:"Nonce,omitempty"`                       //nonce 值
	Target           int32  `protobuf:"varint,11,opt,name=Target,proto3" json:"Target,omitempty"`                     //目标值
	CurrentDataCount int64  `protobuf:"varint,12,opt,name=CurrentDataCount,proto3" json:"CurrentDataCount,omitempty"` //当前数据记录量
	CurrentDataSize  int64  `protobuf:"varint,13,opt,name=CurrentDataSize,proto3" json:"CurrentDataSize,omitempty"`   //当前数据大小
	Version          string `protobuf:"bytes,14,opt,name=Version,proto3" json:"Version,omitempty"`                    //版本号
	BlockType        string `protobuf:"bytes,15,opt,name=BlockType,proto3" json:"BlockType,omitempty"`                //区块类型
	LedgerType       string `protobuf:"bytes,16,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`              //账本类型
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{3}
}

func (x *BlockHeader) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *BlockHeader) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *BlockHeader) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *BlockHeader) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *BlockHeader) GetDataValue() string {
	if x != nil {
		return x.DataValue
	}
	return ""
}

func (x *BlockHeader) GetUpdateTimestamp() string {
	if x != nil {
		return x.UpdateTimestamp
	}
	return ""
}

func (x *BlockHeader) GetDataHash() string {
	if x != nil {
		return x.DataHash
	}
	return ""
}

func (x *BlockHeader) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockHeader) GetPreBlockHash() string {
	if x != nil {
		return x.PreBlockHash
	}
	return ""
}

func (x *BlockHeader) GetNonce() int32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlockHeader) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *BlockHeader) GetCurrentDataCount() int64 {
	if x != nil {
		return x.CurrentDataCount
	}
	return 0
}

func (x *BlockHeader) GetCurrentDataSize() int64 {
	if x != nil {
		return x.CurrentDataSize
	}
	return 0
}

func (x *BlockHeader) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BlockHeader) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *BlockHeader) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

type MinuteTxBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"` //
}

func (x *MinuteTxBlock) Reset() {
	*x = MinuteTxBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinuteTxBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinuteTxBlock) ProtoMessage() {}

func (x *MinuteTxBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinuteTxBlock.ProtoReflect.Descriptor instead.
func (*MinuteTxBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{4}
}

func (x *MinuteTxBlock) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MinuteTxBlock) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type MinuteDataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *BlockHeader   `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	DataReceipts []*DataReceipt `protobuf:"bytes,2,rep,name=DataReceipts,proto3" json:"DataReceipts,omitempty"` //元数据
}

func (x *MinuteDataBlock) Reset() {
	*x = MinuteDataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinuteDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinuteDataBlock) ProtoMessage() {}

func (x *MinuteDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinuteDataBlock.ProtoReflect.Descriptor instead.
func (*MinuteDataBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{5}
}

func (x *MinuteDataBlock) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MinuteDataBlock) GetDataReceipts() []*DataReceipt {
	if x != nil {
		return x.DataReceipts
	}
	return nil
}

type TenMinuteTxBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp string           `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"` //创建时间戳
	KeyId           string           `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`                     //当前区块的key值
	PreBlockHash    string           `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`       //前一个hash区块hash值
	BlockHash       string           `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`             //前一个hash区块hash值
	BlockHeight     int64            `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`        //区块高度
	BlockType       string           `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`             //区块类型
	LedgerType      string           `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`           //账本类型
	Blocks          []*MinuteTxBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *TenMinuteTxBlock) Reset() {
	*x = TenMinuteTxBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenMinuteTxBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenMinuteTxBlock) ProtoMessage() {}

func (x *TenMinuteTxBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenMinuteTxBlock.ProtoReflect.Descriptor instead.
func (*TenMinuteTxBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{6}
}

func (x *TenMinuteTxBlock) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *TenMinuteTxBlock) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *TenMinuteTxBlock) GetPreBlockHash() string {
	if x != nil {
		return x.PreBlockHash
	}
	return ""
}

func (x *TenMinuteTxBlock) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TenMinuteTxBlock) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TenMinuteTxBlock) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *TenMinuteTxBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *TenMinuteTxBlock) GetBlocks() []*MinuteTxBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type DailyTxBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp string              `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"` //创建时间戳
	KeyId           string              `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`                     //当前区块的key值
	PreBlockHash    string              `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`       //前一个hash区块hash值
	BlockHash       string              `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`             //前一个hash区块hash值
	BlockHeight     int64               `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`        //区块高度
	BlockType       string              `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`             //区块类型
	LedgerType      string              `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`           //账本类型
	Blocks          []*TenMinuteTxBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *DailyTxBlock) Reset() {
	*x = DailyTxBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyTxBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyTxBlock) ProtoMessage() {}

func (x *DailyTxBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyTxBlock.ProtoReflect.Descriptor instead.
func (*DailyTxBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{7}
}

func (x *DailyTxBlock) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *DailyTxBlock) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *DailyTxBlock) GetPreBlockHash() string {
	if x != nil {
		return x.PreBlockHash
	}
	return ""
}

func (x *DailyTxBlock) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *DailyTxBlock) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *DailyTxBlock) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *DailyTxBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *DailyTxBlock) GetBlocks() []*TenMinuteTxBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type TenMinuteDataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp string             `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"` //创建时间戳
	KeyId           string             `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`                     //当前区块的key值
	PreBlockHash    string             `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`       //前一个hash区块hash值
	BlockHash       string             `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`             //前一个hash区块hash值
	BlockHeight     int64              `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`        //区块高度
	BlockType       string             `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`             //区块类型
	LedgerType      string             `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`           //账本类型
	Blocks          []*MinuteDataBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *TenMinuteDataBlock) Reset() {
	*x = TenMinuteDataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenMinuteDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenMinuteDataBlock) ProtoMessage() {}

func (x *TenMinuteDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenMinuteDataBlock.ProtoReflect.Descriptor instead.
func (*TenMinuteDataBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{8}
}

func (x *TenMinuteDataBlock) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *TenMinuteDataBlock) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *TenMinuteDataBlock) GetPreBlockHash() string {
	if x != nil {
		return x.PreBlockHash
	}
	return ""
}

func (x *TenMinuteDataBlock) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *TenMinuteDataBlock) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TenMinuteDataBlock) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *TenMinuteDataBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *TenMinuteDataBlock) GetBlocks() []*MinuteDataBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type DailyDataBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateTimestamp string                `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"` //创建时间戳
	KeyId           string                `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`                     //当前区块的key值
	PreBlockHash    string                `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`       //前一个hash区块hash值
	BlockHash       string                `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`             //前一个hash区块hash值
	BlockHeight     int64                 `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`        //区块高度
	BlockType       string                `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`             //区块类型
	LedgerType      string                `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`           //账本类型
	Blocks          []*TenMinuteDataBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
}

func (x *DailyDataBlock) Reset() {
	*x = DailyDataBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyDataBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyDataBlock) ProtoMessage() {}

func (x *DailyDataBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyDataBlock.ProtoReflect.Descriptor instead.
func (*DailyDataBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{9}
}

func (x *DailyDataBlock) GetCreateTimestamp() string {
	if x != nil {
		return x.CreateTimestamp
	}
	return ""
}

func (x *DailyDataBlock) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *DailyDataBlock) GetPreBlockHash() string {
	if x != nil {
		return x.PreBlockHash
	}
	return ""
}

func (x *DailyDataBlock) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *DailyDataBlock) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *DailyDataBlock) GetBlockType() string {
	if x != nil {
		return x.BlockType
	}
	return ""
}

func (x *DailyDataBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *DailyDataBlock) GetBlocks() []*TenMinuteDataBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` //错误码
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`    //错误信息
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{10}
}

func (x *Response) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *Response) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

//////////////////////查询数据接口///////////////////////
//主要四类数据的获取和返回
type RequestDataBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerType     string `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType string `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	DataType       string `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"` //block genesisblock  receipt transaction 四种类型
	Num            int32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`          //获取最新的num个区块数据
}

func (x *RequestDataBatch) Reset() {
	*x = RequestDataBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDataBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDataBatch) ProtoMessage() {}

func (x *RequestDataBatch) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDataBatch.ProtoReflect.Descriptor instead.
func (*RequestDataBatch) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{11}
}

func (x *RequestDataBatch) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *RequestDataBatch) GetBlockChainType() string {
	if x != nil {
		return x.BlockChainType
	}
	return ""
}

func (x *RequestDataBatch) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *RequestDataBatch) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type ResponseDataBatchBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode  int32    `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`  //错误码
	ErrMsg   string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`     //错误信息
	DataType string   `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"` //数据类型
	Length   int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`    //实际上获取到数据数目
	Data     [][]byte `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`         //数据的序列化
}

func (x *ResponseDataBatchBlock) Reset() {
	*x = ResponseDataBatchBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDataBatchBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDataBatchBlock) ProtoMessage() {}

func (x *ResponseDataBatchBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDataBatchBlock.ProtoReflect.Descriptor instead.
func (*ResponseDataBatchBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{12}
}

func (x *ResponseDataBatchBlock) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ResponseDataBatchBlock) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseDataBatchBlock) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ResponseDataBatchBlock) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ResponseDataBatchBlock) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerType     string `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType string `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	TransactionId  string `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Height         int64  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"` //区块高度
}

func (x *RequestTx) Reset() {
	*x = RequestTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTx) ProtoMessage() {}

func (x *RequestTx) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTx.ProtoReflect.Descriptor instead.
func (*RequestTx) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{13}
}

func (x *RequestTx) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *RequestTx) GetBlockChainType() string {
	if x != nil {
		return x.BlockChainType
	}
	return ""
}

func (x *RequestTx) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RequestTx) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ResponseTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32        `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` //错误码
	ErrMsg  string       `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`    //错误信息
	Tx      *Transaction `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`            //交易
}

func (x *ResponseTx) Reset() {
	*x = ResponseTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTx) ProtoMessage() {}

func (x *ResponseTx) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTx.ProtoReflect.Descriptor instead.
func (*ResponseTx) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{14}
}

func (x *ResponseTx) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ResponseTx) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseTx) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type RequestDataReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerType     string `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType string `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	KeyId          string `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`    //key 这个值暂时是etcd的key值是一样的
	Height         int64  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"` //区块高度
}

func (x *RequestDataReceipt) Reset() {
	*x = RequestDataReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDataReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDataReceipt) ProtoMessage() {}

func (x *RequestDataReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDataReceipt.ProtoReflect.Descriptor instead.
func (*RequestDataReceipt) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{15}
}

func (x *RequestDataReceipt) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *RequestDataReceipt) GetBlockChainType() string {
	if x != nil {
		return x.BlockChainType
	}
	return ""
}

func (x *RequestDataReceipt) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *RequestDataReceipt) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ResponseDataReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32          `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` //错误码
	ErrMsg  string         `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`    //错误信息
	Receipt []*DataReceipt `protobuf:"bytes,3,rep,name=receipt,proto3" json:"receipt,omitempty"`  //数据
}

func (x *ResponseDataReceipt) Reset() {
	*x = ResponseDataReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseDataReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDataReceipt) ProtoMessage() {}

func (x *ResponseDataReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDataReceipt.ProtoReflect.Descriptor instead.
func (*ResponseDataReceipt) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{16}
}

func (x *ResponseDataReceipt) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ResponseDataReceipt) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseDataReceipt) GetReceipt() []*DataReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type RequestBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerType     string `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType string `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	Height         int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` //区块高度
	KeyId          string `protobuf:"bytes,4,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
}

func (x *RequestBlock) Reset() {
	*x = RequestBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBlock) ProtoMessage() {}

func (x *RequestBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBlock.ProtoReflect.Descriptor instead.
func (*RequestBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{17}
}

func (x *RequestBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *RequestBlock) GetBlockChainType() string {
	if x != nil {
		return x.BlockChainType
	}
	return ""
}

func (x *RequestBlock) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RequestBlock) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type ResponseBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode int32  `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"` //错误码
	ErrMsg  string `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`    //错误信息
	Block   []byte `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`      //数据
}

func (x *ResponseBlock) Reset() {
	*x = ResponseBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBlock) ProtoMessage() {}

func (x *ResponseBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBlock.ProtoReflect.Descriptor instead.
func (*ResponseBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseBlock) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ResponseBlock) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseBlock) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

type RequestGenesisBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LedgerType     string `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType string `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	Hash           string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *RequestGenesisBlock) Reset() {
	*x = RequestGenesisBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGenesisBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGenesisBlock) ProtoMessage() {}

func (x *RequestGenesisBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGenesisBlock.ProtoReflect.Descriptor instead.
func (*RequestGenesisBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{19}
}

func (x *RequestGenesisBlock) GetLedgerType() string {
	if x != nil {
		return x.LedgerType
	}
	return ""
}

func (x *RequestGenesisBlock) GetBlockChainType() string {
	if x != nil {
		return x.BlockChainType
	}
	return ""
}

func (x *RequestGenesisBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type ResponseGenesisBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode      int32         `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`          //错误码
	ErrMsg       string        `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`             //错误信息
	GenesisBlock *GenesisBlock `protobuf:"bytes,4,opt,name=genesisBlock,proto3" json:"genesisBlock,omitempty"` //数据
}

func (x *ResponseGenesisBlock) Reset() {
	*x = ResponseGenesisBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGenesisBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGenesisBlock) ProtoMessage() {}

func (x *ResponseGenesisBlock) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGenesisBlock.ProtoReflect.Descriptor instead.
func (*ResponseGenesisBlock) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseGenesisBlock) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *ResponseGenesisBlock) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ResponseGenesisBlock) GetGenesisBlock() *GenesisBlock {
	if x != nil {
		return x.GenesisBlock
	}
	return nil
}

type UpperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpperRequest) Reset() {
	*x = UpperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpperRequest) ProtoMessage() {}

func (x *UpperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpperRequest.ProtoReflect.Descriptor instead.
func (*UpperRequest) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{21}
}

func (x *UpperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpperReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpperReply) Reset() {
	*x = UpperReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpperReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpperReply) ProtoMessage() {}

func (x *UpperReply) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpperReply.ProtoReflect.Descriptor instead.
func (*UpperReply) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{22}
}

func (x *UpperReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//
//存证：video userBehaviour
//交易：nodeCredibility Sensor ServiceAccess
type VideoData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataReceipts []*DataReceipt `protobuf:"bytes,1,rep,name=DataReceipts,proto3" json:"DataReceipts,omitempty"`
}

func (x *VideoData) Reset() {
	*x = VideoData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoData) ProtoMessage() {}

func (x *VideoData) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoData.ProtoReflect.Descriptor instead.
func (*VideoData) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{23}
}

func (x *VideoData) GetDataReceipts() []*DataReceipt {
	if x != nil {
		return x.DataReceipts
	}
	return nil
}

type UserBehaviourData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataReceipts []*DataReceipt `protobuf:"bytes,1,rep,name=DataReceipts,proto3" json:"DataReceipts,omitempty"`
}

func (x *UserBehaviourData) Reset() {
	*x = UserBehaviourData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBehaviourData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBehaviourData) ProtoMessage() {}

func (x *UserBehaviourData) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBehaviourData.ProtoReflect.Descriptor instead.
func (*UserBehaviourData) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{24}
}

func (x *UserBehaviourData) GetDataReceipts() []*DataReceipt {
	if x != nil {
		return x.DataReceipts
	}
	return nil
}

type NodeCredibleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *NodeCredibleData) Reset() {
	*x = NodeCredibleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCredibleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCredibleData) ProtoMessage() {}

func (x *NodeCredibleData) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCredibleData.ProtoReflect.Descriptor instead.
func (*NodeCredibleData) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{25}
}

func (x *NodeCredibleData) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type SensorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *SensorData) Reset() {
	*x = SensorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorData) ProtoMessage() {}

func (x *SensorData) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorData.ProtoReflect.Descriptor instead.
func (*SensorData) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{26}
}

func (x *SensorData) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ServiceAccessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
}

func (x *ServiceAccessData) Reset() {
	*x = ServiceAccessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccessData) ProtoMessage() {}

func (x *ServiceAccessData) ProtoReflect() protoreflect.Message {
	mi := &file_block_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccessData.ProtoReflect.Descriptor instead.
func (*ServiceAccessData) Descriptor() ([]byte, []int) {
	return file_block_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceAccessData) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

var File_block_proto protoreflect.FileDescriptor

var file_block_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72,
	0x70, 0x63, 0x22, 0xc2, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x43, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6c,
	0x61, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x04, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x69, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0xc9, 0x02, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x54, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x22, 0x8d, 0x04, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x10,
	0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54,
	0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x9f,
	0x02, 0x0a, 0x0c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x22, 0xa4, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x50, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x3c, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x60, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x20, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74,
	0x78, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x73,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x71, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7f, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x35, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x22, 0x0a, 0x0c, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x0a, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x34, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x22, 0x48, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x0a, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x49, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xf5, 0x01, 0x0a, 0x13, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0xf3, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x78,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf5, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0xf9, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x14, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xfa, 0x01, 0x0a,
	0x12, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6e, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xd1, 0x02, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x1a, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x12, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x11, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x78, 0x12, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x78, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x78, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x17, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x1a, 0x18, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x00, 0x32, 0xba, 0x02,
	0x0a, 0x07, 0x54, 0x6f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x28, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f,
	0x3b, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_block_proto_rawDescOnce sync.Once
	file_block_proto_rawDescData = file_block_proto_rawDesc
)

func file_block_proto_rawDescGZIP() []byte {
	file_block_proto_rawDescOnce.Do(func() {
		file_block_proto_rawDescData = protoimpl.X.CompressGZIP(file_block_proto_rawDescData)
	})
	return file_block_proto_rawDescData
}

var file_block_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_block_proto_goTypes = []interface{}{
	(*GenesisBlock)(nil),           // 0: rpc.GenesisBlock
	(*DataReceipt)(nil),            // 1: rpc.DataReceipt
	(*Transaction)(nil),            // 2: rpc.Transaction
	(*BlockHeader)(nil),            // 3: rpc.BlockHeader
	(*MinuteTxBlock)(nil),          // 4: rpc.MinuteTxBlock
	(*MinuteDataBlock)(nil),        // 5: rpc.MinuteDataBlock
	(*TenMinuteTxBlock)(nil),       // 6: rpc.TenMinuteTxBlock
	(*DailyTxBlock)(nil),           // 7: rpc.DailyTxBlock
	(*TenMinuteDataBlock)(nil),     // 8: rpc.TenMinuteDataBlock
	(*DailyDataBlock)(nil),         // 9: rpc.DailyDataBlock
	(*Response)(nil),               // 10: rpc.Response
	(*RequestDataBatch)(nil),       // 11: rpc.RequestDataBatch
	(*ResponseDataBatchBlock)(nil), // 12: rpc.ResponseDataBatchBlock
	(*RequestTx)(nil),              // 13: rpc.RequestTx
	(*ResponseTx)(nil),             // 14: rpc.ResponseTx
	(*RequestDataReceipt)(nil),     // 15: rpc.RequestDataReceipt
	(*ResponseDataReceipt)(nil),    // 16: rpc.ResponseDataReceipt
	(*RequestBlock)(nil),           // 17: rpc.RequestBlock
	(*ResponseBlock)(nil),          // 18: rpc.ResponseBlock
	(*RequestGenesisBlock)(nil),    // 19: rpc.RequestGenesisBlock
	(*ResponseGenesisBlock)(nil),   // 20: rpc.ResponseGenesisBlock
	(*UpperRequest)(nil),           // 21: rpc.UpperRequest
	(*UpperReply)(nil),             // 22: rpc.UpperReply
	(*VideoData)(nil),              // 23: rpc.VideoData
	(*UserBehaviourData)(nil),      // 24: rpc.UserBehaviourData
	(*NodeCredibleData)(nil),       // 25: rpc.NodeCredibleData
	(*SensorData)(nil),             // 26: rpc.SensorData
	(*ServiceAccessData)(nil),      // 27: rpc.ServiceAccessData
}
var file_block_proto_depIdxs = []int32{
	3,  // 0: rpc.MinuteTxBlock.Header:type_name -> rpc.BlockHeader
	2,  // 1: rpc.MinuteTxBlock.Transactions:type_name -> rpc.Transaction
	3,  // 2: rpc.MinuteDataBlock.Header:type_name -> rpc.BlockHeader
	1,  // 3: rpc.MinuteDataBlock.DataReceipts:type_name -> rpc.DataReceipt
	4,  // 4: rpc.TenMinuteTxBlock.Blocks:type_name -> rpc.MinuteTxBlock
	6,  // 5: rpc.DailyTxBlock.Blocks:type_name -> rpc.TenMinuteTxBlock
	5,  // 6: rpc.TenMinuteDataBlock.Blocks:type_name -> rpc.MinuteDataBlock
	8,  // 7: rpc.DailyDataBlock.Blocks:type_name -> rpc.TenMinuteDataBlock
	2,  // 8: rpc.ResponseTx.tx:type_name -> rpc.Transaction
	1,  // 9: rpc.ResponseDataReceipt.receipt:type_name -> rpc.DataReceipt
	0,  // 10: rpc.ResponseGenesisBlock.genesisBlock:type_name -> rpc.GenesisBlock
	1,  // 11: rpc.VideoData.DataReceipts:type_name -> rpc.DataReceipt
	1,  // 12: rpc.UserBehaviourData.DataReceipts:type_name -> rpc.DataReceipt
	2,  // 13: rpc.NodeCredibleData.Transactions:type_name -> rpc.Transaction
	2,  // 14: rpc.SensorData.Transactions:type_name -> rpc.Transaction
	2,  // 15: rpc.ServiceAccessData.Transactions:type_name -> rpc.Transaction
	0,  // 16: rpc.AccessLedgerService.AddGenesisBlock:input_type -> rpc.GenesisBlock
	4,  // 17: rpc.AccessLedgerService.AddMinuteBlock:input_type -> rpc.MinuteTxBlock
	6,  // 18: rpc.AccessLedgerService.AddTenMinuteBlock:input_type -> rpc.TenMinuteTxBlock
	7,  // 19: rpc.AccessLedgerService.AddDailyBlock:input_type -> rpc.DailyTxBlock
	0,  // 20: rpc.NodeLedgerService.AddGenesisBlock:input_type -> rpc.GenesisBlock
	4,  // 21: rpc.NodeLedgerService.AddMinuteBlock:input_type -> rpc.MinuteTxBlock
	6,  // 22: rpc.NodeLedgerService.AddTenMinuteBlock:input_type -> rpc.TenMinuteTxBlock
	7,  // 23: rpc.NodeLedgerService.AddDailyBlock:input_type -> rpc.DailyTxBlock
	0,  // 24: rpc.SensorLedgerService.AddGenesisBlock:input_type -> rpc.GenesisBlock
	4,  // 25: rpc.SensorLedgerService.AddMinuteBlock:input_type -> rpc.MinuteTxBlock
	6,  // 26: rpc.SensorLedgerService.AddTenMinuteBlock:input_type -> rpc.TenMinuteTxBlock
	7,  // 27: rpc.SensorLedgerService.AddDailyBlock:input_type -> rpc.DailyTxBlock
	0,  // 28: rpc.UserLedgerService.AddGenesisBlock:input_type -> rpc.GenesisBlock
	5,  // 29: rpc.UserLedgerService.AddMinuteBlock:input_type -> rpc.MinuteDataBlock
	8,  // 30: rpc.UserLedgerService.AddTenMinuteBlock:input_type -> rpc.TenMinuteDataBlock
	9,  // 31: rpc.UserLedgerService.AddDailyBlock:input_type -> rpc.DailyDataBlock
	0,  // 32: rpc.VideoLedgerService.AddGenesisBlock:input_type -> rpc.GenesisBlock
	5,  // 33: rpc.VideoLedgerService.AddMinuteBlock:input_type -> rpc.MinuteDataBlock
	8,  // 34: rpc.VideoLedgerService.AddTenMinuteBlock:input_type -> rpc.TenMinuteDataBlock
	9,  // 35: rpc.VideoLedgerService.AddDailyBlock:input_type -> rpc.DailyDataBlock
	11, // 36: rpc.QueryService.queryBlockBatch:input_type -> rpc.RequestDataBatch
	17, // 37: rpc.QueryService.queryBlock:input_type -> rpc.RequestBlock
	19, // 38: rpc.QueryService.queryGenesisBlock:input_type -> rpc.RequestGenesisBlock
	13, // 39: rpc.QueryService.queryTx:input_type -> rpc.RequestTx
	15, // 40: rpc.QueryService.queryDataReceipt:input_type -> rpc.RequestDataReceipt
	21, // 41: rpc.ToUpper.Upper:input_type -> rpc.UpperRequest
	25, // 42: rpc.ToUpper.NodeCredible:input_type -> rpc.NodeCredibleData
	23, // 43: rpc.ToUpper.Video:input_type -> rpc.VideoData
	26, // 44: rpc.ToUpper.Sensor:input_type -> rpc.SensorData
	24, // 45: rpc.ToUpper.UserBehaviour:input_type -> rpc.UserBehaviourData
	27, // 46: rpc.ToUpper.ServiceAccess:input_type -> rpc.ServiceAccessData
	10, // 47: rpc.AccessLedgerService.AddGenesisBlock:output_type -> rpc.Response
	10, // 48: rpc.AccessLedgerService.AddMinuteBlock:output_type -> rpc.Response
	10, // 49: rpc.AccessLedgerService.AddTenMinuteBlock:output_type -> rpc.Response
	10, // 50: rpc.AccessLedgerService.AddDailyBlock:output_type -> rpc.Response
	10, // 51: rpc.NodeLedgerService.AddGenesisBlock:output_type -> rpc.Response
	10, // 52: rpc.NodeLedgerService.AddMinuteBlock:output_type -> rpc.Response
	10, // 53: rpc.NodeLedgerService.AddTenMinuteBlock:output_type -> rpc.Response
	10, // 54: rpc.NodeLedgerService.AddDailyBlock:output_type -> rpc.Response
	10, // 55: rpc.SensorLedgerService.AddGenesisBlock:output_type -> rpc.Response
	10, // 56: rpc.SensorLedgerService.AddMinuteBlock:output_type -> rpc.Response
	10, // 57: rpc.SensorLedgerService.AddTenMinuteBlock:output_type -> rpc.Response
	10, // 58: rpc.SensorLedgerService.AddDailyBlock:output_type -> rpc.Response
	10, // 59: rpc.UserLedgerService.AddGenesisBlock:output_type -> rpc.Response
	10, // 60: rpc.UserLedgerService.AddMinuteBlock:output_type -> rpc.Response
	10, // 61: rpc.UserLedgerService.AddTenMinuteBlock:output_type -> rpc.Response
	10, // 62: rpc.UserLedgerService.AddDailyBlock:output_type -> rpc.Response
	10, // 63: rpc.VideoLedgerService.AddGenesisBlock:output_type -> rpc.Response
	10, // 64: rpc.VideoLedgerService.AddMinuteBlock:output_type -> rpc.Response
	10, // 65: rpc.VideoLedgerService.AddTenMinuteBlock:output_type -> rpc.Response
	10, // 66: rpc.VideoLedgerService.AddDailyBlock:output_type -> rpc.Response
	12, // 67: rpc.QueryService.queryBlockBatch:output_type -> rpc.ResponseDataBatchBlock
	18, // 68: rpc.QueryService.queryBlock:output_type -> rpc.ResponseBlock
	20, // 69: rpc.QueryService.queryGenesisBlock:output_type -> rpc.ResponseGenesisBlock
	14, // 70: rpc.QueryService.queryTx:output_type -> rpc.ResponseTx
	16, // 71: rpc.QueryService.queryDataReceipt:output_type -> rpc.ResponseDataReceipt
	22, // 72: rpc.ToUpper.Upper:output_type -> rpc.UpperReply
	10, // 73: rpc.ToUpper.NodeCredible:output_type -> rpc.Response
	10, // 74: rpc.ToUpper.Video:output_type -> rpc.Response
	10, // 75: rpc.ToUpper.Sensor:output_type -> rpc.Response
	10, // 76: rpc.ToUpper.UserBehaviour:output_type -> rpc.Response
	10, // 77: rpc.ToUpper.ServiceAccess:output_type -> rpc.Response
	47, // [47:78] is the sub-list for method output_type
	16, // [16:47] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_block_proto_init() }
func file_block_proto_init() {
	if File_block_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_block_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinuteTxBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinuteDataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenMinuteTxBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyTxBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenMinuteDataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyDataBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDataBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDataBatchBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDataReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseDataReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGenesisBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGenesisBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpperReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBehaviourData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCredibleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_block_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_block_proto_goTypes,
		DependencyIndexes: file_block_proto_depIdxs,
		MessageInfos:      file_block_proto_msgTypes,
	}.Build()
	File_block_proto = out.File
	file_block_proto_rawDesc = nil
	file_block_proto_goTypes = nil
	file_block_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccessLedgerServiceClient is the client API for AccessLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error)
}

type accessLedgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessLedgerServiceClient(cc grpc.ClientConnInterface) AccessLedgerServiceClient {
	return &accessLedgerServiceClient{cc}
}

func (c *accessLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessLedgerServiceServer is the server API for AccessLedgerService service.
type AccessLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error)
}

// UnimplementedAccessLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccessLedgerServiceServer struct {
}

func (*UnimplementedAccessLedgerServiceServer) AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedAccessLedgerServiceServer) AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedAccessLedgerServiceServer) AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedAccessLedgerServiceServer) AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterAccessLedgerServiceServer(s *grpc.Server, srv AccessLedgerServiceServer) {
	s.RegisterService(&_AccessLedgerService_serviceDesc, srv)
}

func _AccessLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AccessLedgerService",
	HandlerType: (*AccessLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _AccessLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _AccessLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _AccessLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _AccessLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}

// NodeLedgerServiceClient is the client API for NodeLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error)
}

type nodeLedgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeLedgerServiceClient(cc grpc.ClientConnInterface) NodeLedgerServiceClient {
	return &nodeLedgerServiceClient{cc}
}

func (c *nodeLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeLedgerServiceServer is the server API for NodeLedgerService service.
type NodeLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error)
}

// UnimplementedNodeLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeLedgerServiceServer struct {
}

func (*UnimplementedNodeLedgerServiceServer) AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedNodeLedgerServiceServer) AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedNodeLedgerServiceServer) AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedNodeLedgerServiceServer) AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterNodeLedgerServiceServer(s *grpc.Server, srv NodeLedgerServiceServer) {
	s.RegisterService(&_NodeLedgerService_serviceDesc, srv)
}

func _NodeLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NodeLedgerService",
	HandlerType: (*NodeLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _NodeLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _NodeLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _NodeLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _NodeLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}

// SensorLedgerServiceClient is the client API for SensorLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error)
}

type sensorLedgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorLedgerServiceClient(cc grpc.ClientConnInterface) SensorLedgerServiceClient {
	return &sensorLedgerServiceClient{cc}
}

func (c *sensorLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorLedgerServiceServer is the server API for SensorLedgerService service.
type SensorLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error)
}

// UnimplementedSensorLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorLedgerServiceServer struct {
}

func (*UnimplementedSensorLedgerServiceServer) AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedSensorLedgerServiceServer) AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedSensorLedgerServiceServer) AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedSensorLedgerServiceServer) AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterSensorLedgerServiceServer(s *grpc.Server, srv SensorLedgerServiceServer) {
	s.RegisterService(&_SensorLedgerService_serviceDesc, srv)
}

func _SensorLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SensorLedgerService",
	HandlerType: (*SensorLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _SensorLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _SensorLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _SensorLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _SensorLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}

// UserLedgerServiceClient is the client API for UserLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error)
}

type userLedgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLedgerServiceClient(cc grpc.ClientConnInterface) UserLedgerServiceClient {
	return &userLedgerServiceClient{cc}
}

func (c *userLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLedgerServiceServer is the server API for UserLedgerService service.
type UserLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteDataBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteDataBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyDataBlock) (*Response, error)
}

// UnimplementedUserLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserLedgerServiceServer struct {
}

func (*UnimplementedUserLedgerServiceServer) AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedUserLedgerServiceServer) AddMinuteBlock(context.Context, *MinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedUserLedgerServiceServer) AddTenMinuteBlock(context.Context, *TenMinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedUserLedgerServiceServer) AddDailyBlock(context.Context, *DailyDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterUserLedgerServiceServer(s *grpc.Server, srv UserLedgerServiceServer) {
	s.RegisterService(&_UserLedgerService_serviceDesc, srv)
}

func _UserLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.UserLedgerService",
	HandlerType: (*UserLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _UserLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _UserLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _UserLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _UserLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}

// VideoLedgerServiceClient is the client API for VideoLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error)
}

type videoLedgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoLedgerServiceClient(cc grpc.ClientConnInterface) VideoLedgerServiceClient {
	return &videoLedgerServiceClient{cc}
}

func (c *videoLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoLedgerServiceServer is the server API for VideoLedgerService service.
type VideoLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteDataBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteDataBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyDataBlock) (*Response, error)
}

// UnimplementedVideoLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVideoLedgerServiceServer struct {
}

func (*UnimplementedVideoLedgerServiceServer) AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedVideoLedgerServiceServer) AddMinuteBlock(context.Context, *MinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedVideoLedgerServiceServer) AddTenMinuteBlock(context.Context, *TenMinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedVideoLedgerServiceServer) AddDailyBlock(context.Context, *DailyDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterVideoLedgerServiceServer(s *grpc.Server, srv VideoLedgerServiceServer) {
	s.RegisterService(&_VideoLedgerService_serviceDesc, srv)
}

func _VideoLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.VideoLedgerService",
	HandlerType: (*VideoLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _VideoLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _VideoLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _VideoLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _VideoLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryBlockBatch(ctx context.Context, in *RequestDataBatch, opts ...grpc.CallOption) (*ResponseDataBatchBlock, error)
	QueryBlock(ctx context.Context, in *RequestBlock, opts ...grpc.CallOption) (*ResponseBlock, error)
	QueryGenesisBlock(ctx context.Context, in *RequestGenesisBlock, opts ...grpc.CallOption) (*ResponseGenesisBlock, error)
	QueryTx(ctx context.Context, in *RequestTx, opts ...grpc.CallOption) (*ResponseTx, error)
	QueryDataReceipt(ctx context.Context, in *RequestDataReceipt, opts ...grpc.CallOption) (*ResponseDataReceipt, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryBlockBatch(ctx context.Context, in *RequestDataBatch, opts ...grpc.CallOption) (*ResponseDataBatchBlock, error) {
	out := new(ResponseDataBatchBlock)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryBlockBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryBlock(ctx context.Context, in *RequestBlock, opts ...grpc.CallOption) (*ResponseBlock, error) {
	out := new(ResponseBlock)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryGenesisBlock(ctx context.Context, in *RequestGenesisBlock, opts ...grpc.CallOption) (*ResponseGenesisBlock, error) {
	out := new(ResponseGenesisBlock)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryTx(ctx context.Context, in *RequestTx, opts ...grpc.CallOption) (*ResponseTx, error) {
	out := new(ResponseTx)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryDataReceipt(ctx context.Context, in *RequestDataReceipt, opts ...grpc.CallOption) (*ResponseDataReceipt, error) {
	out := new(ResponseDataReceipt)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryDataReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryBlockBatch(context.Context, *RequestDataBatch) (*ResponseDataBatchBlock, error)
	QueryBlock(context.Context, *RequestBlock) (*ResponseBlock, error)
	QueryGenesisBlock(context.Context, *RequestGenesisBlock) (*ResponseGenesisBlock, error)
	QueryTx(context.Context, *RequestTx) (*ResponseTx, error)
	QueryDataReceipt(context.Context, *RequestDataReceipt) (*ResponseDataReceipt, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryBlockBatch(context.Context, *RequestDataBatch) (*ResponseDataBatchBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockBatch not implemented")
}
func (*UnimplementedQueryServiceServer) QueryBlock(context.Context, *RequestBlock) (*ResponseBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlock not implemented")
}
func (*UnimplementedQueryServiceServer) QueryGenesisBlock(context.Context, *RequestGenesisBlock) (*ResponseGenesisBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGenesisBlock not implemented")
}
func (*UnimplementedQueryServiceServer) QueryTx(context.Context, *RequestTx) (*ResponseTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (*UnimplementedQueryServiceServer) QueryDataReceipt(context.Context, *RequestDataReceipt) (*ResponseDataReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataReceipt not implemented")
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryBlockBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryBlockBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryBlockBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryBlockBatch(ctx, req.(*RequestDataBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryBlock(ctx, req.(*RequestBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryGenesisBlock(ctx, req.(*RequestGenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryTx(ctx, req.(*RequestTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryDataReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryDataReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryDataReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryDataReceipt(ctx, req.(*RequestDataReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryBlockBatch",
			Handler:    _QueryService_QueryBlockBatch_Handler,
		},
		{
			MethodName: "queryBlock",
			Handler:    _QueryService_QueryBlock_Handler,
		},
		{
			MethodName: "queryGenesisBlock",
			Handler:    _QueryService_QueryGenesisBlock_Handler,
		},
		{
			MethodName: "queryTx",
			Handler:    _QueryService_QueryTx_Handler,
		},
		{
			MethodName: "queryDataReceipt",
			Handler:    _QueryService_QueryDataReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}

// ToUpperClient is the client API for ToUpper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ToUpperClient interface {
	Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperReply, error)
	NodeCredible(ctx context.Context, in *NodeCredibleData, opts ...grpc.CallOption) (*Response, error)
	Video(ctx context.Context, in *VideoData, opts ...grpc.CallOption) (*Response, error)
	Sensor(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*Response, error)
	UserBehaviour(ctx context.Context, in *UserBehaviourData, opts ...grpc.CallOption) (*Response, error)
	ServiceAccess(ctx context.Context, in *ServiceAccessData, opts ...grpc.CallOption) (*Response, error)
}

type toUpperClient struct {
	cc grpc.ClientConnInterface
}

func NewToUpperClient(cc grpc.ClientConnInterface) ToUpperClient {
	return &toUpperClient{cc}
}

func (c *toUpperClient) Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperReply, error) {
	out := new(UpperReply)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/Upper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) NodeCredible(ctx context.Context, in *NodeCredibleData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/NodeCredible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) Video(ctx context.Context, in *VideoData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/Video", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) Sensor(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/Sensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) UserBehaviour(ctx context.Context, in *UserBehaviourData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/UserBehaviour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) ServiceAccess(ctx context.Context, in *ServiceAccessData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/ServiceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToUpperServer is the server API for ToUpper service.
type ToUpperServer interface {
	Upper(context.Context, *UpperRequest) (*UpperReply, error)
	NodeCredible(context.Context, *NodeCredibleData) (*Response, error)
	Video(context.Context, *VideoData) (*Response, error)
	Sensor(context.Context, *SensorData) (*Response, error)
	UserBehaviour(context.Context, *UserBehaviourData) (*Response, error)
	ServiceAccess(context.Context, *ServiceAccessData) (*Response, error)
}

// UnimplementedToUpperServer can be embedded to have forward compatible implementations.
type UnimplementedToUpperServer struct {
}

func (*UnimplementedToUpperServer) Upper(context.Context, *UpperRequest) (*UpperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upper not implemented")
}
func (*UnimplementedToUpperServer) NodeCredible(context.Context, *NodeCredibleData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeCredible not implemented")
}
func (*UnimplementedToUpperServer) Video(context.Context, *VideoData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Video not implemented")
}
func (*UnimplementedToUpperServer) Sensor(context.Context, *SensorData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sensor not implemented")
}
func (*UnimplementedToUpperServer) UserBehaviour(context.Context, *UserBehaviourData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBehaviour not implemented")
}
func (*UnimplementedToUpperServer) ServiceAccess(context.Context, *ServiceAccessData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceAccess not implemented")
}

func RegisterToUpperServer(s *grpc.Server, srv ToUpperServer) {
	s.RegisterService(&_ToUpper_serviceDesc, srv)
}

func _ToUpper_Upper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).Upper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/Upper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).Upper(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_NodeCredible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeCredibleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).NodeCredible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/NodeCredible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).NodeCredible(ctx, req.(*NodeCredibleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_Video_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).Video(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/Video",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).Video(ctx, req.(*VideoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_Sensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).Sensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/Sensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).Sensor(ctx, req.(*SensorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_UserBehaviour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBehaviourData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).UserBehaviour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/UserBehaviour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).UserBehaviour(ctx, req.(*UserBehaviourData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_ServiceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccessData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).ServiceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/ServiceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).ServiceAccess(ctx, req.(*ServiceAccessData))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToUpper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ToUpper",
	HandlerType: (*ToUpperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upper",
			Handler:    _ToUpper_Upper_Handler,
		},
		{
			MethodName: "NodeCredible",
			Handler:    _ToUpper_NodeCredible_Handler,
		},
		{
			MethodName: "Video",
			Handler:    _ToUpper_Video_Handler,
		},
		{
			MethodName: "Sensor",
			Handler:    _ToUpper_Sensor_Handler,
		},
		{
			MethodName: "UserBehaviour",
			Handler:    _ToUpper_UserBehaviour_Handler,
		},
		{
			MethodName: "ServiceAccess",
			Handler:    _ToUpper_ServiceAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block.proto",
}
